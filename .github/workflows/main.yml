name: CI

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build_extensions_linux:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        example: 
          - clap-button-message
          - cell-toolbar
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - mimerenderer
          - notifications
          - react-widget
          - server-extension
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets


    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build extension
        uses: ./.github/actions/build-extension
        with:
          example: ${{ matrix.example }}
          run-ui-tests: 'true'

  build_extensions_cross_platform:
    needs: build_extensions_linux
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        example: 
          - clap-button-message
          - cell-toolbar
          - codemirror-extension
          - command-palette
          - commands
          - completer
          - contentheader
          - context-menu
          - custom-log-console
          - datagrid
          - documents
          - hello-world
          - launcher
          - kernel-messaging
          - kernel-output
          - log-messages
          - main-menu
          - metadata-form
          - mimerenderer
          - notifications
          - react-widget
          - server-extension
          - settings
          - shout-button-message
          - signals
          - state
          - toolbar-button
          - toparea-text-widget
          - widgets
        os: [macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build extension
        uses: ./.github/actions/build-extension
        with:
          example: ${{ matrix.example }}
          run-ui-tests: 'false'

  build_serverextension_linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build server extension
        uses: ./.github/actions/build-serverextension
        with:
          run-ui-tests: 'true'

  build_serverextension_cross_platform:
    needs: build_serverextension_linux
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build server extension
        uses: ./.github/actions/build-serverextension
        with:
          run-ui-tests: 'false'

  build_all:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache lerna
        uses: actions/cache@v4
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-lerna-${{ hashFiles('**/package.json') }}
          restore-keys: ${{ runner.os }}-lerna-
      - name: Install node
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          architecture: 'x64'
      - name: Get pip cache dir
        id: pip-cache
        run: |
          echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
        shell: bash
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: ${{ runner.os }}-pip-${{ hashFiles('environment.yml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install the Python dependencies
        run: python -m pip install jupyterlab~=4.0.0 pytest pytest-check-links "pytest-jupyter[server]>=0.6.0"
      - name: Bootstrap the jlpm deps
        run: jlpm
      - name: Build all the extensions
        run: |
          # Check embedded snippets
          jlpm lint:check
          # Check links as last step as new tutorial may set links not yet valid (like file not yet in main)
          jlpm run lerna exec --concurrency 4 -- "pytest --check-links"
